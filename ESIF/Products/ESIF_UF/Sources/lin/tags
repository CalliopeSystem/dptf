!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ACPI_CPPC_SYSFS_REL_PATH	esif_uf_sysfs_enumerate_os_lin.c	73;"	d	file:
ACPI_CPU	esif_uf_action_sysfs_os_lin.c	91;"	d	file:
ACPI_DEVICE_NAME_LEN	esif_uf_sysfs_enumerate_os_lin.c	41;"	d	file:
ACPI_DPTF	esif_uf_sysfs_enumerate_os_lin.c	43;"	d	file:
ACPI_THERMAL_IOR_TYPE	esif_uf_action_sysfs_os_lin.c	83;"	d	file:
ARCHBITS	main.c	126;"	d	file:
ARCHBITS	main.c	130;"	d	file:
ARCHBITS	main.c	132;"	d	file:
ARCHNAME	main.c	125;"	d	file:
ARCHNAME	main.c	128;"	d	file:
ART	esif_uf_action_sysfs_os_lin.c	/^	ART = 0,$/;"	e	enum:esif_thermal_rel_type	file:
ART_COUNT	esif_uf_action_sysfs_os_lin.c	87;"	d	file:
ART_LEN	esif_uf_action_sysfs_os_lin.c	85;"	d	file:
AccelGetLoc	esif_uf_sensor_manager_os_lin.c	/^static eEsifError AccelGetLoc(SensorPtr sensorPtr, char *fullPath)$/;"	f	file:
AccelGetScale	esif_uf_sensor_manager_os_lin.c	/^static void AccelGetScale(SensorPtr sensorPtr, char *fullPath)$/;"	f	file:
AccelOpenFileDescriptors	esif_uf_sensor_manager_os_lin.c	/^static void AccelOpenFileDescriptors(SensorPtr sensorPtr, char *fullPath)$/;"	f	file:
AccelRawUpdate	esif_uf_sensor_manager_os_lin.c	/^static void AccelRawUpdate(SensorPtr sensorPtr)$/;"	f	file:
Accelerometer	esif_uf_sensor_manager_os_lin.c	/^} Accelerometer, *AccelerometerPtr;$/;"	t	typeref:struct:Accelerometer_s	file:
AccelerometerPtr	esif_uf_sensor_manager_os_lin.c	/^} Accelerometer, *AccelerometerPtr;$/;"	t	typeref:struct:Accelerometer_s	file:
Accelerometer_s	esif_uf_sensor_manager_os_lin.c	/^typedef struct Accelerometer_s {$/;"	s	file:
ActionContextCleanUp	esif_uf_action_sysfs_os_lin.c	/^static void ActionContextCleanUp(void *itemPtr)$/;"	f	file:
ActionSysfsGet	esif_uf_action_sysfs_os_lin.c	/^static eEsifError ESIF_CALLCONV ActionSysfsGet($/;"	f	file:
ActionSysfsSet	esif_uf_action_sysfs_os_lin.c	/^static eEsifError ESIF_CALLCONV ActionSysfsSet($/;"	f	file:
AddEntryToSystemCpuIndexTable	esif_uf_sysfs_enumerate_os_lin.c	/^void AddEntryToSystemCpuIndexTable(SystemCpuIndexTablePtr self, UInt32 cpuIndex, UInt32 highestPerf)$/;"	f
AddSysfsReadTableEntry	esif_uf_sysfs_enumerate_os_lin.c	/^static void AddSysfsReadTableEntry(char *ACPI_name, char *sysfsAtrributePath, Int32 eventType)$/;"	f	file:
AllocateThermalZones	esif_uf_action_sysfs_os_lin.c	/^static int AllocateThermalZones(void)$/;"	f	file:
BINARY_TABLE_SIZE	esif_uf_action_sysfs_os_lin.c	51;"	d	file:
CDEV	esif_uf_sysfs_os_lin.h	/^	CDEV,$/;"	e	enum:zoneType
COPYRIGHT_NOTICE	main.c	42;"	d	file:
CPU_SYSFS_PATH	esif_uf_sysfs_enumerate_os_lin.c	72;"	d	file:
CPU_location	esif_uf_action_sysfs_os_lin.c	/^static const char *CPU_location[] = {$/;"	v	file:
CPU_location	esif_uf_sysfs_enumerate_os_lin.c	/^const char *CPU_location[NUM_CPU_LOCATIONS] = {"0000:00:04.0", "0000:00:0b.0", "0000:00:00.1"};$/;"	v
CheckBatteryPercentChange	esif_uf_sensor_manager_os_lin.c	/^static void CheckBatteryPercentChange(void)$/;"	f	file:
CheckDispPlatOrientation	esif_uf_sensor_manager_os_lin.c	/^static void CheckDispPlatOrientation(SensorPtr sensorPtr)$/;"	f	file:
CheckDockModeChange	esif_uf_sensor_manager_os_lin.c	/^static void CheckDockModeChange(void)$/;"	f	file:
CheckLidStateChange	esif_uf_sensor_manager_os_lin.c	/^static void CheckLidStateChange(void)$/;"	f	file:
CheckMotionChange	esif_uf_sensor_manager_os_lin.c	/^static void CheckMotionChange(SensorPtr sensorPtr)$/;"	f	file:
CheckPlatTypeChange	esif_uf_sensor_manager_os_lin.c	/^static void CheckPlatTypeChange(SensorPtr sensorPtr)$/;"	f	file:
CheckPowerSrcChange	esif_uf_sensor_manager_os_lin.c	/^static void CheckPowerSrcChange(void)$/;"	f	file:
CpuSysfsFilter	esif_uf_sysfs_enumerate_os_lin.c	/^Int32 CpuSysfsFilter(const struct dirent * entry)$/;"	f
CreateActionAssociatedParticipants	main.c	/^esif_error_t CreateActionAssociatedParticipants(esif_action_type_t actionType)$/;"	f
CreateEnumeratedParticipants	main.c	/^esif_error_t CreateEnumeratedParticipants()$/;"	f
DEFAULT_DEVICE_NAME	esif_uf_sysfs_enumerate_os_lin.c	30;"	d	file:
DEFAULT_DRIVER_NAME	esif_uf_sysfs_enumerate_os_lin.c	29;"	d	file:
DPTF_PARTICIPANT_PREFIX	esif_uf_sysfs_enumerate_os_lin.c	42;"	d	file:
DeAllocateThermalZones	esif_uf_action_sysfs_os_lin.c	/^static int DeAllocateThermalZones(void)$/;"	f	file:
DeinitSensor	esif_uf_sensor_manager_os_lin.c	/^static void DeinitSensor(int index)$/;"	f	file:
DumpSystemCpuIndexTable	esif_uf_sysfs_enumerate_os_lin.c	/^void DumpSystemCpuIndexTable(SystemCpuIndexTablePtr self)$/;"	f
ENERGY_UNIT_CONVERSION_FACTOR	esif_uf_action_sysfs_os_lin.c	77;"	d	file:
EPSILON_CONVERT_PERC	esif_uf_action_sysfs_os_lin.c	61;"	d	file:
ERROR_VALUE	esif_uf_action_sysfs_os_lin.c	49;"	d	file:
ESIF_ATTR_INSTANCE_LOCK	main.c	185;"	d	file:
ESIF_FIVR_PF_MULT	esif_uf_action_sysfs_os_lin.c	36;"	d	file:
ESIF_FIVR_SSC_0_1_RES	esif_uf_action_sysfs_os_lin.c	71;"	d	file:
ESIF_FIVR_SSC_0_1_RES_MAX_REG_VAL	esif_uf_action_sysfs_os_lin.c	68;"	d	file:
ESIF_FIVR_SSC_0_1_RES_MIN_PER	esif_uf_action_sysfs_os_lin.c	72;"	d	file:
ESIF_FIVR_SSC_0_2_RES	esif_uf_action_sysfs_os_lin.c	73;"	d	file:
ESIF_FIVR_SSC_0_2_RES_MAX_REG_VAL	esif_uf_action_sysfs_os_lin.c	67;"	d	file:
ESIF_FIVR_SSC_0_2_RES_MIN_PER	esif_uf_action_sysfs_os_lin.c	74;"	d	file:
ESIF_FIVR_SSC_0_2_RES_MIN_REG_VAL	esif_uf_action_sysfs_os_lin.c	69;"	d	file:
ESIF_FIVR_SSC_CLK_MASK	esif_uf_action_sysfs_os_lin.c	66;"	d	file:
ESIF_FIVR_SSC_ENABLE	esif_uf_action_sysfs_os_lin.c	70;"	d	file:
ESIF_FIVR_SSC_MASK	esif_uf_action_sysfs_os_lin.c	65;"	d	file:
ESIF_FREQ_ADJ_STEP_15	esif_uf_action_sysfs_os_lin.c	38;"	d	file:
ESIF_IIO_SAMPLE_PERIOD	esif_uf_sensor_manager_os_lin.c	39;"	d	file:
ESIF_PATHLIST	main.c	/^static const esif_string ESIF_PATHLIST =$/;"	v	file:
ESIF_STARTUP_SCRIPT_DAEMON_MODE	main.c	47;"	d	file:
ESIF_STARTUP_SCRIPT_DAEMON_MODE	main.c	49;"	d	file:
ESIF_STARTUP_SCRIPT_DAEMON_MODE	main.c	52;"	d	file:
ESIF_STARTUP_SCRIPT_SERVER_MODE	main.c	54;"	d	file:
ESIF_SYSFS_ALT_PATH	esif_uf_action_sysfs_os_lin.c	/^	ESIF_SYSFS_ALT_PATH = 'PTLA',$/;"	e	enum:esif_sysfs_command	file:
ESIF_SYSFS_ALT_QUERY	esif_uf_action_sysfs_os_lin.c	/^	ESIF_SYSFS_ALT_QUERY = 'QTLA',$/;"	e	enum:esif_sysfs_command	file:
ESIF_SYSFS_ATTRIBUTE	esif_uf_action_sysfs_os_lin.c	/^	ESIF_SYSFS_ATTRIBUTE = 'RRTA',$/;"	e	enum:esif_sysfs_command	file:
ESIF_SYSFS_BINARY_TABLE	esif_uf_action_sysfs_os_lin.c	/^	ESIF_SYSFS_BINARY_TABLE = 'LBTB'$/;"	e	enum:esif_sysfs_command	file:
ESIF_SYSFS_CALC	esif_uf_action_sysfs_os_lin.c	/^	ESIF_SYSFS_CALC = 'CLAC',$/;"	e	enum:esif_sysfs_command	file:
ESIF_SYSFS_DIRECT_ENUM	esif_uf_action_sysfs_os_lin.c	/^	ESIF_SYSFS_DIRECT_ENUM = 'ETCD',$/;"	e	enum:esif_sysfs_command	file:
ESIF_SYSFS_DIRECT_PATH	esif_uf_action_sysfs_os_lin.c	/^	ESIF_SYSFS_DIRECT_PATH = 'PTCD',$/;"	e	enum:esif_sysfs_command	file:
ESIF_SYSFS_DIRECT_QUERY	esif_uf_action_sysfs_os_lin.c	/^	ESIF_SYSFS_DIRECT_QUERY = 'QTCD',$/;"	e	enum:esif_sysfs_command	file:
ESIF_SYSFS_DIRECT_QUERY_ENUM	esif_uf_action_sysfs_os_lin.c	/^	ESIF_SYSFS_DIRECT_QUERY_ENUM = 'EQCD',$/;"	e	enum:esif_sysfs_command	file:
ESIF_SYSFS_GET_ADAPTER_POWER_RATING	esif_uf_action_sysfs_os_lin.c	/^	ESIF_SYSFS_GET_ADAPTER_POWER_RATING = 'GTRA',$/;"	e	enum:esif_sysfs_param	file:
ESIF_SYSFS_GET_BATTERY_CURRENT_DISCHARGE_CAPABILITY	esif_uf_action_sysfs_os_lin.c	/^	ESIF_SYSFS_GET_BATTERY_CURRENT_DISCHARGE_CAPABILITY = 'PPMC',$/;"	e	enum:esif_sysfs_param	file:
ESIF_SYSFS_GET_BATTERY_HIGH_FREQUENCY_IMPEDANCE	esif_uf_action_sysfs_os_lin.c	/^	ESIF_SYSFS_GET_BATTERY_HIGH_FREQUENCY_IMPEDANCE = 'FHBR',$/;"	e	enum:esif_sysfs_param	file:
ESIF_SYSFS_GET_BATTERY_MAX_PEAK_CURRENT	esif_uf_action_sysfs_os_lin.c	/^	ESIF_SYSFS_GET_BATTERY_MAX_PEAK_CURRENT = 'ppmc',$/;"	e	enum:esif_sysfs_param	file:
ESIF_SYSFS_GET_BATTERY_NO_LOAD_VOLTAGE	esif_uf_action_sysfs_os_lin.c	/^	ESIF_SYSFS_GET_BATTERY_NO_LOAD_VOLTAGE = 'LNBV',$/;"	e	enum:esif_sysfs_param	file:
ESIF_SYSFS_GET_CHARGER_TYPE	esif_uf_action_sysfs_os_lin.c	/^	ESIF_SYSFS_GET_CHARGER_TYPE = 'PYTC',$/;"	e	enum:esif_sysfs_param	file:
ESIF_SYSFS_GET_CPU_PDL	esif_uf_action_sysfs_os_lin.c	/^	ESIF_SYSFS_GET_CPU_PDL = 'DPCG',$/;"	e	enum:esif_sysfs_param	file:
ESIF_SYSFS_GET_CSTATE_RESIDENCY	esif_uf_action_sysfs_os_lin.c	/^	ESIF_SYSFS_GET_CSTATE_RESIDENCY= 'RSCG',$/;"	e	enum:esif_sysfs_param	file:
ESIF_SYSFS_GET_DISPLAY_BRIGHTNESS	esif_uf_action_sysfs_os_lin.c	/^	ESIF_SYSFS_GET_DISPLAY_BRIGHTNESS = 'SBDG',$/;"	e	enum:esif_sysfs_param	file:
ESIF_SYSFS_GET_FAN_INFO	esif_uf_action_sysfs_os_lin.c	/^	ESIF_SYSFS_GET_FAN_INFO = 'FIFG',$/;"	e	enum:esif_sysfs_param	file:
ESIF_SYSFS_GET_FAN_PERF_STATES	esif_uf_action_sysfs_os_lin.c	/^	ESIF_SYSFS_GET_FAN_PERF_STATES = 'SPFG',$/;"	e	enum:esif_sysfs_param	file:
ESIF_SYSFS_GET_FAN_STATUS	esif_uf_action_sysfs_os_lin.c	/^	ESIF_SYSFS_GET_FAN_STATUS = 'TSFG',$/;"	e	enum:esif_sysfs_param	file:
ESIF_SYSFS_GET_FIVR_VER_PCH	esif_uf_action_sysfs_os_lin.c	/^	ESIF_SYSFS_GET_FIVR_VER_PCH = 'PVFG',$/;"	e	enum:esif_sysfs_param	file:
ESIF_SYSFS_GET_GFX_PSTATE	esif_uf_action_sysfs_os_lin.c	/^	ESIF_SYSFS_GET_GFX_PSTATE = 'SPGG',$/;"	e	enum:esif_sysfs_param	file:
ESIF_SYSFS_GET_PLATFORM_BATTERY_STEADY_STATE	esif_uf_action_sysfs_os_lin.c	/^	ESIF_SYSFS_GET_PLATFORM_BATTERY_STEADY_STATE = 'SSBP',$/;"	e	enum:esif_sysfs_param	file:
ESIF_SYSFS_GET_PLATFORM_MAX_BATTERY_POWER	esif_uf_action_sysfs_os_lin.c	/^	ESIF_SYSFS_GET_PLATFORM_MAX_BATTERY_POWER = 'XAMP',$/;"	e	enum:esif_sysfs_param	file:
ESIF_SYSFS_GET_PLATFORM_POWER_LIMIT_TIME_WINDOW	esif_uf_action_sysfs_os_lin.c	/^	ESIF_SYSFS_GET_PLATFORM_POWER_LIMIT_TIME_WINDOW = 'WTPG',$/;"	e	enum:esif_sysfs_param	file:
ESIF_SYSFS_GET_PLATFORM_POWER_SOURCE	esif_uf_action_sysfs_os_lin.c	/^	ESIF_SYSFS_GET_PLATFORM_POWER_SOURCE = 'CRSP',$/;"	e	enum:esif_sysfs_param	file:
ESIF_SYSFS_GET_PLATFORM_REST_OF_POWER	esif_uf_action_sysfs_os_lin.c	/^	ESIF_SYSFS_GET_PLATFORM_REST_OF_POWER = 'PORP',$/;"	e	enum:esif_sysfs_param	file:
ESIF_SYSFS_GET_RAPL_ENERGY	esif_uf_action_sysfs_os_lin.c	/^	ESIF_SYSFS_GET_RAPL_ENERGY= 'ERSG',$/;"	e	enum:esif_sysfs_param	file:
ESIF_SYSFS_GET_RAPL_ENERGY_UNIT	esif_uf_action_sysfs_os_lin.c	/^	ESIF_SYSFS_GET_RAPL_ENERGY_UNIT= 'UERG',$/;"	e	enum:esif_sysfs_param	file:
ESIF_SYSFS_GET_RAPL_TIME_WINDOW	esif_uf_action_sysfs_os_lin.c	/^	ESIF_SYSFS_GET_RAPL_TIME_WINDOW = 'WTRG',$/;"	e	enum:esif_sysfs_param	file:
ESIF_SYSFS_GET_RFPROFILE_CENTER_FREQUENCY	esif_uf_action_sysfs_os_lin.c	/^	ESIF_SYSFS_GET_RFPROFILE_CENTER_FREQUENCY = 'FCRG',$/;"	e	enum:esif_sysfs_param	file:
ESIF_SYSFS_GET_RFPROFILE_CENTER_FREQUENCY_PCH	esif_uf_action_sysfs_os_lin.c	/^	ESIF_SYSFS_GET_RFPROFILE_CENTER_FREQUENCY_PCH = 'PCRG',$/;"	e	enum:esif_sysfs_param	file:
ESIF_SYSFS_GET_RFPROFILE_FREQUENCY_ADJUST_RESOLUTION	esif_uf_action_sysfs_os_lin.c	/^	ESIF_SYSFS_GET_RFPROFILE_FREQUENCY_ADJUST_RESOLUTION = 'RAFG',$/;"	e	enum:esif_sysfs_param	file:
ESIF_SYSFS_GET_RFPROFILE_MAX_FREQUENCY	esif_uf_action_sysfs_os_lin.c	/^	ESIF_SYSFS_GET_RFPROFILE_MAX_FREQUENCY = 'AMRG',$/;"	e	enum:esif_sysfs_param	file:
ESIF_SYSFS_GET_RFPROFILE_MIN_FREQUENCY	esif_uf_action_sysfs_os_lin.c	/^	ESIF_SYSFS_GET_RFPROFILE_MIN_FREQUENCY = 'IMRG',$/;"	e	enum:esif_sysfs_param	file:
ESIF_SYSFS_GET_RFPROFILE_SSC	esif_uf_action_sysfs_os_lin.c	/^	ESIF_SYSFS_GET_RFPROFILE_SSC = 'FSRG',$/;"	e	enum:esif_sysfs_param	file:
ESIF_SYSFS_GET_RFPROFILE_SSC_PCH	esif_uf_action_sysfs_os_lin.c	/^	ESIF_SYSFS_GET_RFPROFILE_SSC_PCH = 'PSSG',$/;"	e	enum:esif_sysfs_param	file:
ESIF_SYSFS_GET_SOC_PL1	esif_uf_action_sysfs_os_lin.c	/^	ESIF_SYSFS_GET_SOC_PL1 = 'LPSG',$/;"	e	enum:esif_sysfs_param	file:
ESIF_SYSFS_GET_SOC_RAPL	esif_uf_action_sysfs_os_lin.c	/^	ESIF_SYSFS_GET_SOC_RAPL = 'ARSG',$/;"	e	enum:esif_sysfs_param	file:
ESIF_SYSFS_GET_SOC_TEMP	esif_uf_action_sysfs_os_lin.c	/^	ESIF_SYSFS_GET_SOC_TEMP = 'ETSG',$/;"	e	enum:esif_sysfs_param	file:
ESIF_SYSFS_GET_TCC_OFFSET	esif_uf_action_sysfs_os_lin.c	/^	ESIF_SYSFS_GET_TCC_OFFSET = 'CCTG',$/;"	e	enum:esif_sysfs_param	file:
ESIF_SYSFS_SET_BRIGHTNESS_LEVEL	esif_uf_action_sysfs_os_lin.c	/^	ESIF_SYSFS_SET_BRIGHTNESS_LEVEL = 'ELBS',$/;"	e	enum:esif_sysfs_param	file:
ESIF_SYSFS_SET_CPU_PSTATE	esif_uf_action_sysfs_os_lin.c	/^	ESIF_SYSFS_SET_CPU_PSTATE = 'SPCS',$/;"	e	enum:esif_sysfs_param	file:
ESIF_SYSFS_SET_EPP_WORKLOAD_TYPE	esif_uf_action_sysfs_os_lin.c	/^	ESIF_SYSFS_SET_EPP_WORKLOAD_TYPE = 'TWES',$/;"	e	enum:esif_sysfs_param	file:
ESIF_SYSFS_SET_FAN_LEVEL	esif_uf_action_sysfs_os_lin.c	/^	ESIF_SYSFS_SET_FAN_LEVEL = 'ELFS',$/;"	e	enum:esif_sysfs_param	file:
ESIF_SYSFS_SET_GFX_PSTATE	esif_uf_action_sysfs_os_lin.c	/^	ESIF_SYSFS_SET_GFX_PSTATE = 'SPGS',$/;"	e	enum:esif_sysfs_param	file:
ESIF_SYSFS_SET_IMOK	esif_uf_action_sysfs_os_lin.c	/^	ESIF_SYSFS_SET_IMOK = 'KOMI',$/;"	e	enum:esif_sysfs_param	file:
ESIF_SYSFS_SET_OSC	esif_uf_action_sysfs_os_lin.c	/^	ESIF_SYSFS_SET_OSC = 'CSOS',$/;"	e	enum:esif_sysfs_param	file:
ESIF_SYSFS_SET_PBOK	esif_uf_action_sysfs_os_lin.c	/^	ESIF_SYSFS_SET_PBOK = 'KOBP',$/;"	e	enum:esif_sysfs_param	file:
ESIF_SYSFS_SET_PLATFORM_POWER_LIMIT_TIME_WINDOW	esif_uf_action_sysfs_os_lin.c	/^	ESIF_SYSFS_SET_PLATFORM_POWER_LIMIT_TIME_WINDOW = 'WTPS',$/;"	e	enum:esif_sysfs_param	file:
ESIF_SYSFS_SET_RAPL_TIME_WINDOW	esif_uf_action_sysfs_os_lin.c	/^	ESIF_SYSFS_SET_RAPL_TIME_WINDOW = 'WTRS',$/;"	e	enum:esif_sysfs_param	file:
ESIF_SYSFS_SET_RFPROFILE_CENTER_FREQUENCY	esif_uf_action_sysfs_os_lin.c	/^	ESIF_SYSFS_SET_RFPROFILE_CENTER_FREQUENCY = 'FCRS',$/;"	e	enum:esif_sysfs_param	file:
ESIF_SYSFS_SET_RFPROFILE_CENTER_FREQUENCY_PCH	esif_uf_action_sysfs_os_lin.c	/^	ESIF_SYSFS_SET_RFPROFILE_CENTER_FREQUENCY_PCH = 'PCRS',$/;"	e	enum:esif_sysfs_param	file:
ESIF_SYSFS_SET_TCC_OFFSET	esif_uf_action_sysfs_os_lin.c	/^	ESIF_SYSFS_SET_TCC_OFFSET = 'CCTS',$/;"	e	enum:esif_sysfs_param	file:
ESIF_SYSFS_SET_WWAN_PSTATE	esif_uf_action_sysfs_os_lin.c	/^	ESIF_SYSFS_SET_WWAN_PSTATE = 'SPWS',$/;"	e	enum:esif_sysfs_param	file:
ESIF_TRACE_DEBUG_DISABLED	esif_uf_ipc_os_lin.c	20;"	d	file:
ESIF_TRACE_ID	esif_uf_action_sysfs_os_lin.c	21;"	d	file:
ESIF_TRACE_ID	esif_uf_ipc_os_lin.c	18;"	d	file:
ESIF_TRACE_ID	esif_uf_sensor_manager_os_lin.c	19;"	d	file:
ESIF_TRACE_ID	esif_uf_sysfs_enumerate_os_lin.c	18;"	d	file:
ESIF_TRACE_ID	main.c	19;"	d	file:
ESIF_XTAL_CLOCK_FREQ_38_4	esif_uf_action_sysfs_os_lin.c	37;"	d	file:
EVENT_INTERVAL_THRESHOLD	main.c	98;"	d	file:
EnumerateCoresBasedOnPerformance	esif_uf_sysfs_enumerate_os_lin.c	/^eEsifError EnumerateCoresBasedOnPerformance()$/;"	f
EnumerateFpsEntries	esif_uf_action_sysfs_os_lin.c	/^static eEsifError EnumerateFpsEntries(EsifDataPtr responsePtr, const EsifString devicePathPtr)$/;"	f	file:
EnumerateSysfsReadAttributes	esif_uf_sysfs_enumerate_os_lin.c	/^static void EnumerateSysfsReadAttributes(char *ACPI_name,char *participant_path)$/;"	f	file:
EsifActSysfsExit	esif_uf_action_sysfs_os_lin.c	/^void EsifActSysfsExit()$/;"	f
EsifActSysfsInit	esif_uf_action_sysfs_os_lin.c	/^enum esif_rc EsifActSysfsInit()$/;"	f
EsifIio_Poll	esif_uf_sensor_manager_os_lin.c	/^static void *EsifIio_Poll(void *ptr)$/;"	f	file:
EsifSensorMgr_DeregisterSensors	esif_uf_sensor_manager_os_lin.c	/^static void EsifSensorMgr_DeregisterSensors()$/;"	f	file:
EsifSensorMgr_Exit	esif_uf_sensor_manager_os_lin.c	/^void EsifSensorMgr_Exit()$/;"	f
EsifSensorMgr_Init	esif_uf_sensor_manager_os_lin.c	/^void EsifSensorMgr_Init()$/;"	f
EsifSensorMgr_InitializeNonIioBusSensors	esif_uf_sensor_manager_os_lin.c	/^static eEsifError EsifSensorMgr_InitializeNonIioBusSensors()$/;"	f	file:
EsifSensorMgr_RegisterSensors	esif_uf_sensor_manager_os_lin.c	/^static eEsifError EsifSensorMgr_RegisterSensors()$/;"	f	file:
EsifSysfsPeriodicPolling	main.c	/^static Bool EsifSysfsPeriodicPolling()$/;"	f	file:
EsifSysfsPollEvent	main.c	/^static Bool EsifSysfsPollEvent()$/;"	f	file:
EsifSysfsReadExit	main.c	/^static void EsifSysfsReadExit()$/;"	f	file:
EsifSysfsReadIsStarted	main.c	/^static Bool EsifSysfsReadIsStarted()$/;"	f	file:
EsifSysfsReadListen	main.c	/^static void *EsifSysfsReadListen(void *ptr)$/;"	f	file:
EsifSysfsReadStart	main.c	/^static void EsifSysfsReadStart()$/;"	f	file:
EsifSysfsReadStop	main.c	/^static void EsifSysfsReadStop()$/;"	f	file:
ExtractBits	esif_uf_action_sysfs_os_lin.c	/^static UInt64 ExtractBits(UInt64 *number, UInt32 bitPos, UInt32 nBits)$/;"	f	file:
FIVR_CENTER_FREQ_MASK	esif_uf_action_sysfs_os_lin.c	39;"	d	file:
FIVR_LSB_MASK	esif_uf_action_sysfs_os_lin.c	43;"	d	file:
FIVR_LSB_SHIFT	esif_uf_action_sysfs_os_lin.c	42;"	d	file:
FIVR_MSB_MASK	esif_uf_action_sysfs_os_lin.c	41;"	d	file:
FIVR_MSB_SHIFT	esif_uf_action_sysfs_os_lin.c	40;"	d	file:
FpsEntryFilter	esif_uf_action_sysfs_os_lin.c	/^static int FpsEntryFilter(const struct dirent *entry)$/;"	f	file:
GET_ART	esif_uf_action_sysfs_os_lin.c	89;"	d	file:
GET_TRT	esif_uf_action_sysfs_os_lin.c	88;"	d	file:
GT_FREQ_STEP	esif_uf_action_sysfs_os_lin.c	78;"	d	file:
GT_MAX_FREQ_MHZ	esif_uf_action_sysfs_os_lin.c	95;"	d	file:
GT_MIN_FREQ_MHZ	esif_uf_action_sysfs_os_lin.c	94;"	d	file:
GT_RP0_FREQ_MHZ	esif_uf_action_sysfs_os_lin.c	92;"	d	file:
GT_RPN_FREQ_MHZ	esif_uf_action_sysfs_os_lin.c	93;"	d	file:
GetCStateResidency	esif_uf_action_sysfs_os_lin.c	/^static eEsifError GetCStateResidency(char *path, char *node, UInt32 msrAddr, EsifDataPtr responsePtr)$/;"	f	file:
GetCpuFreqPdl	esif_uf_action_sysfs_os_lin.c	/^static u64 GetCpuFreqPdl(void)$/;"	f	file:
GetCrystalClockFrequency	esif_uf_action_sysfs_os_lin.c	/^static eEsifError GetCrystalClockFrequency(UInt32 *crystalFreq)$/;"	f	file:
GetDisplayBrightness	esif_uf_action_sysfs_os_lin.c	/^static eEsifError GetDisplayBrightness(char *path, EsifDataPtr responsePtr)$/;"	f	file:
GetFanInfo	esif_uf_action_sysfs_os_lin.c	/^static eEsifError GetFanInfo(EsifDataPtr responsePtr, const EsifString devicePathPtr)$/;"	f	file:
GetFanPerfStates	esif_uf_action_sysfs_os_lin.c	/^static eEsifError GetFanPerfStates(const EsifString acpiDevName, EsifDataPtr responsePtr, const EsifString devicePathPtr)$/;"	f	file:
GetFanStatus	esif_uf_action_sysfs_os_lin.c	/^static eEsifError GetFanStatus(EsifDataPtr responsePtr, const EsifString devicePathPtr)$/;"	f	file:
GetGddvData	esif_uf_action_sysfs_os_lin.c	/^static eEsifError GetGddvData(const EsifDataPtr responsePtr)$/;"	f	file:
GetGfxPerfSupportStates	esif_uf_action_sysfs_os_lin.c	/^static enum esif_rc GetGfxPerfSupportStates(EsifDataPtr responsePtr)$/;"	f	file:
GetManagerSysfsPath	esif_uf_sysfs_enumerate_os_lin.c	/^static eEsifError GetManagerSysfsPath()$/;"	f	file:
GetMsrValue	esif_uf_action_sysfs_os_lin.c	/^static eEsifError GetMsrValue(char *path, char *node, UInt32 msrAddr, EsifDataPtr responsePtr)$/;"	f	file:
GetNumberOfCpuCores	esif_uf_action_sysfs_os_lin.c	/^static void GetNumberOfCpuCores()$/;"	f	file:
GetOemVariables	esif_uf_action_sysfs_os_lin.c	/^static eEsifError GetOemVariables(char *table_str)$/;"	f	file:
GetRaplEnergyUnit	esif_uf_action_sysfs_os_lin.c	/^static eEsifError GetRaplEnergyUnit(char *path, char *node, UInt32 msrAddr, EsifDataPtr responsePtr)$/;"	f	file:
GetRaplRawEnergyInUnits	esif_uf_action_sysfs_os_lin.c	/^static eEsifError GetRaplRawEnergyInUnits(UInt64 energyUjs, UInt32 energyUnit, UInt32 *rawEnergyInUnits)$/;"	f	file:
GetRfprofileCenterFreq	esif_uf_action_sysfs_os_lin.c	/^static eEsifError GetRfprofileCenterFreq(EsifDataPtr responsePtr, char *path, char *node)$/;"	f	file:
GetRfprofileFreqAdjuRes	esif_uf_action_sysfs_os_lin.c	/^static eEsifError GetRfprofileFreqAdjuRes(EsifDataPtr responsePtr)$/;"	f	file:
GetUIntFromActionContext	esif_uf_action_sysfs_os_lin.c	/^static ESIF_INLINE eEsifError GetUIntFromActionContext(const size_t context, const EsifString parm, const EsifDataPtr responsePtr)$/;"	f	file:
HID_LEN	esif_uf_sysfs_enumerate_os_lin.c	40;"	d	file:
HIGH_PERF_SYSFS_NAME	esif_uf_sysfs_enumerate_os_lin.c	74;"	d	file:
HOME_DIRECTORY	main.c	122;"	d	file:
HandleOscRequest	esif_uf_action_sysfs_os_lin.c	/^static eEsifError HandleOscRequest(const struct esif_data_complex_osc *oscPtr, const char *cur_node_name)$/;"	f	file:
IIO_STR_LEN	esif_uf_sysfs_os_lin.h	25;"	d
INSTANCE_ID_0	esif_uf_sysfs_enumerate_os_lin.c	37;"	d	file:
INVALID_64BIT_UINTEGER	esif_uf_action_sysfs_os_lin.c	62;"	d	file:
IioDeviceFilter	esif_uf_sensor_manager_os_lin.c	/^static int IioDeviceFilter(const struct dirent *entry)$/;"	f	file:
InitSensor	esif_uf_sensor_manager_os_lin.c	/^static void InitSensor(int index, char *devName)$/;"	f	file:
IsCapabilitySupportedInDomain	esif_uf_action_sysfs_os_lin.c	/^static Bool IsCapabilitySupportedInDomain(const EsifUpDomainPtr domainPtr, enum esif_capability_type capabilityType)$/;"	f	file:
IsSupportedDttPlatformDevice	esif_uf_sysfs_enumerate_os_lin.c	/^static Bool IsSupportedDttPlatformDevice(const char *hidDevice)$/;"	f	file:
IsSystemCpuIndexTableInitialized	esif_uf_sysfs_enumerate_os_lin.c	/^Bool IsSystemCpuIndexTableInitialized(SystemCpuIndexTablePtr self)$/;"	f
IsValidDirectoryPath	esif_uf_sysfs_enumerate_os_lin.c	/^static Bool IsValidDirectoryPath(const char* dirPath)$/;"	f	file:
IsValidFilePath	esif_uf_sysfs_enumerate_os_lin.c	/^static Bool IsValidFilePath(char* filePath)$/;"	f	file:
LidAngle	esif_uf_sensor_manager_os_lin.c	/^} LidAngle, *LidAnglePtr;$/;"	t	typeref:struct:LidAngle_s	file:
LidAngleOpenFileDescriptors	esif_uf_sensor_manager_os_lin.c	/^static void LidAngleOpenFileDescriptors(SensorPtr sensorPtr, char *fullPath)$/;"	f	file:
LidAnglePtr	esif_uf_sensor_manager_os_lin.c	/^} LidAngle, *LidAnglePtr;$/;"	t	typeref:struct:LidAngle_s	file:
LidAngle_s	esif_uf_sensor_manager_os_lin.c	/^typedef struct LidAngle_s {$/;"	s	file:
MAX_ACPI_SCOPE_LEN	esif_uf_action_sysfs_os_lin.c	82;"	d	file:
MAX_ACTION_HT_SIZE	esif_uf_action_sysfs_os_lin.c	54;"	d	file:
MAX_ACX_ENTRIES	esif_uf_action_sysfs_os_lin.c	56;"	d	file:
MAX_AUTO_REPOS	main.c	97;"	d	file:
MAX_CORE_COUNT_SUPPORTED	esif_uf_sysfs_enumerate_os_lin.c	70;"	d	file:
MAX_CORE_COUNT_SUPPORTED	esif_uf_sysfs_os_lin.h	22;"	d
MAX_CPU_TYPES_SUPPORTED	esif_uf_sysfs_enumerate_os_lin.c	71;"	d	file:
MAX_CPU_TYPES_SUPPORTED	esif_uf_sysfs_os_lin.h	23;"	d
MAX_ESIF_TABLES	esif_uf_action_sysfs_os_lin.c	50;"	d	file:
MAX_FAN_PROPERTIES	esif_uf_action_sysfs_os_lin.c	80;"	d	file:
MAX_FMT_STR_LEN	esif_uf_action_sysfs_os_lin.c	53;"	d	file:
MAX_FMT_STR_LEN	esif_uf_sysfs_enumerate_os_lin.c	39;"	d	file:
MAX_GFORCE	esif_uf_sensor_manager_os_lin.c	40;"	d	file:
MAX_GFX_PSTATE	esif_uf_action_sysfs_os_lin.c	79;"	d	file:
MAX_GUID_STR_LEN	esif_uf_action_sysfs_os_lin.c	52;"	d	file:
MAX_HYSTERESIS_MILLIC	esif_uf_action_sysfs_os_lin.c	60;"	d	file:
MAX_IDX_HOLDER	esif_uf_action_sysfs_os_lin.c	47;"	d	file:
MAX_INT64	esif_uf_sysfs_os_lin.h	32;"	d
MAX_NODE_IDX	esif_uf_action_sysfs_os_lin.c	48;"	d	file:
MAX_PARAM_STRING	esif_uf_action_sysfs_os_lin.c	46;"	d	file:
MAX_PAYLOAD	main.c	96;"	d	file:
MAX_SEARCH_STRING	esif_uf_action_sysfs_os_lin.c	45;"	d	file:
MAX_STR_LINE_LEN	esif_uf_sysfs_os_lin.h	29;"	d
MAX_SYSFS_FILENAME	esif_uf_sysfs_os_lin.h	26;"	d
MAX_SYSFS_PATH	esif_uf_sysfs_os_lin.h	28;"	d
MAX_SYSFS_PERF_STATES	esif_uf_action_sysfs_os_lin.c	58;"	d	file:
MAX_SYSFS_POLL_STRING	esif_uf_action_sysfs_os_lin.c	55;"	d	file:
MAX_SYSFS_PSTATES	esif_uf_action_sysfs_os_lin.c	57;"	d	file:
MAX_SYSFS_READ_ENTRY_SIZE	esif_uf_sysfs_os_lin.h	46;"	d
MAX_SYSFS_STRING	esif_uf_sysfs_os_lin.h	30;"	d
MAX_SYSFS_SUFFIX	esif_uf_sysfs_os_lin.h	27;"	d
MAX_TIMER_THREADS_AUTO	main.c	94;"	d	file:
MAX_TIMER_THREADS_CLI	main.c	95;"	d	file:
MAX_ZONE_NAME_LEN	esif_uf_sysfs_os_lin.h	24;"	d
MILLICELSIUS_PER_CELSIUS	esif_uf_action_sysfs_os_lin.c	64;"	d	file:
MIN_HYSTERESIS_MILLIC	esif_uf_action_sysfs_os_lin.c	59;"	d	file:
MIN_INT64	esif_uf_sysfs_os_lin.h	31;"	d
MIN_PERF_PERCENTAGE	esif_uf_action_sysfs_os_lin.c	44;"	d	file:
MOTION_CHANGE_THRESHOLD	esif_uf_sensor_manager_os_lin.c	41;"	d	file:
NUM_CPU_LOCATIONS	esif_uf_sysfs_enumerate_os_lin.c	51;"	d	file:
NUM_RFKILL_TYPES	esif_uf_action_sysfs_os_lin.c	/^	NUM_RFKILL_TYPES,$/;"	e	enum:rfkill_type	file:
NormalizeAccelRawData	esif_uf_sensor_manager_os_lin.c	/^static AccelerometerData NormalizeAccelRawData(SensorPtr sensorPtr)$/;"	f	file:
NotifyJhs	esif_uf_action_sysfs_os_lin.c	/^static void NotifyJhs(EsifUpPtr upPtr, const EsifDataPtr requestPtr)$/;"	f	file:
PARTICIPANT_FIELD_LEN	esif_uf_sysfs_enumerate_os_lin.c	50;"	d	file:
PLAT_TYPE_CLAMSHELL_ANGLE_MAX	esif_uf_sensor_manager_os_lin.c	43;"	d	file:
PLAT_TYPE_CLAMSHELL_ANGLE_MIN	esif_uf_sensor_manager_os_lin.c	42;"	d	file:
PLAT_TYPE_TABLET_ANGLE_MIN	esif_uf_sensor_manager_os_lin.c	44;"	d	file:
POWER_SUPPLY_CAPACITY	main.c	/^	POWER_SUPPLY_CAPACITY,$/;"	e	enum:power_supply_event	file:
POWER_SUPPLY_NAME	main.c	/^	POWER_SUPPLY_NAME = 0,$/;"	e	enum:power_supply_event	file:
POWER_SUPPLY_STATUS	main.c	/^	POWER_SUPPLY_STATUS,$/;"	e	enum:power_supply_event	file:
PROMPT_LEN	main.c	1728;"	d	file:
PSY_EVENT_ENABLE	esif_uf_sensor_manager_os_lin.c	45;"	d	file:
PerfCpuMapping	esif_uf_sysfs_os_lin.h	/^} PerfCpuMapping, *PerfCpuMappingPtr;$/;"	t	typeref:struct:_PerfCpuMapping
PerfCpuMappingPtr	esif_uf_sysfs_os_lin.h	/^} PerfCpuMapping, *PerfCpuMappingPtr;$/;"	t	typeref:struct:_PerfCpuMapping
RAPL_ENERGY_UNIT_BIT_POS	esif_uf_action_sysfs_os_lin.c	75;"	d	file:
RAPL_ENERGY_UNIT_NBITS	esif_uf_action_sysfs_os_lin.c	76;"	d	file:
RFKILL_OP_ADD	esif_uf_action_sysfs_os_lin.c	/^	RFKILL_OP_ADD = 0,$/;"	e	enum:rfkill_operation	file:
RFKILL_OP_CHANGE	esif_uf_action_sysfs_os_lin.c	/^	RFKILL_OP_CHANGE,$/;"	e	enum:rfkill_operation	file:
RFKILL_OP_CHANGE_ALL	esif_uf_action_sysfs_os_lin.c	/^	RFKILL_OP_CHANGE_ALL,$/;"	e	enum:rfkill_operation	file:
RFKILL_OP_DEL	esif_uf_action_sysfs_os_lin.c	/^	RFKILL_OP_DEL,$/;"	e	enum:rfkill_operation	file:
RFKILL_TYPE_ALL	esif_uf_action_sysfs_os_lin.c	/^	RFKILL_TYPE_ALL = 0,$/;"	e	enum:rfkill_type	file:
RFKILL_TYPE_BLUETOOTH	esif_uf_action_sysfs_os_lin.c	/^	RFKILL_TYPE_BLUETOOTH,$/;"	e	enum:rfkill_type	file:
RFKILL_TYPE_FM	esif_uf_action_sysfs_os_lin.c	/^	RFKILL_TYPE_FM,$/;"	e	enum:rfkill_type	file:
RFKILL_TYPE_GPS	esif_uf_action_sysfs_os_lin.c	/^	RFKILL_TYPE_GPS,$/;"	e	enum:rfkill_type	file:
RFKILL_TYPE_UWB	esif_uf_action_sysfs_os_lin.c	/^	RFKILL_TYPE_UWB,$/;"	e	enum:rfkill_type	file:
RFKILL_TYPE_WLAN	esif_uf_action_sysfs_os_lin.c	/^	RFKILL_TYPE_WLAN,$/;"	e	enum:rfkill_type	file:
RFKILL_TYPE_WWAN	esif_uf_action_sysfs_os_lin.c	/^	RFKILL_TYPE_WWAN,$/;"	e	enum:rfkill_type	file:
ResetThermalZonePolicy	esif_uf_action_sysfs_os_lin.c	/^static eEsifError ResetThermalZonePolicy()$/;"	f	file:
SENSOR_LOC_BASE	esif_uf_sensor_manager_os_lin.c	/^	SENSOR_LOC_BASE = 0,$/;"	e	enum:SensorLocation_e	file:
SENSOR_LOC_LID	esif_uf_sensor_manager_os_lin.c	/^	SENSOR_LOC_LID,$/;"	e	enum:SensorLocation_e	file:
SENSOR_LOC_NA	esif_uf_sensor_manager_os_lin.c	/^	SENSOR_LOC_NA$/;"	e	enum:SensorLocation_e	file:
SENSOR_TYPE_ACCEL	esif_uf_sensor_manager_os_lin.c	/^	SENSOR_TYPE_ACCEL = 0,$/;"	e	enum:SensorType_e	file:
SENSOR_TYPE_LID_ANGLE	esif_uf_sensor_manager_os_lin.c	/^	SENSOR_TYPE_LID_ANGLE,$/;"	e	enum:SensorType_e	file:
SENSOR_TYPE_NA	esif_uf_sensor_manager_os_lin.c	/^	SENSOR_TYPE_NA$/;"	e	enum:SensorType_e	file:
SIZE_OF_UINT64	esif_uf_sysfs_enumerate_os_lin.c	52;"	d	file:
SYSFS_AVAILABLE_UUIDS	esif_uf_action_sysfs_os_lin.c	112;"	d	file:
SYSFS_CURRENT_UUID	esif_uf_action_sysfs_os_lin.c	113;"	d	file:
SYSFS_DATA_VAULT	esif_uf_action_sysfs_os_lin.c	111;"	d	file:
SYSFS_DEFAULT_HID	esif_uf_sysfs_enumerate_os_lin.c	46;"	d	file:
SYSFS_DEVICES_PLATFORM	esif_uf_sysfs_enumerate_os_lin.c	36;"	d	file:
SYSFS_DISP_HID	esif_uf_sysfs_enumerate_os_lin.c	48;"	d	file:
SYSFS_DPTF_HID	esif_uf_sysfs_enumerate_os_lin.c	44;"	d	file:
SYSFS_EPP_NODE	esif_uf_action_sysfs_os_lin.c	110;"	d	file:
SYSFS_EPP_PATH	esif_uf_action_sysfs_os_lin.c	108;"	d	file:
SYSFS_FAN_HID	esif_uf_sysfs_enumerate_os_lin.c	47;"	d	file:
SYSFS_FILE_RETRIEVAL_SUCCESS	esif_uf_action_sysfs_os_lin.c	63;"	d	file:
SYSFS_FIVR_NODE	esif_uf_action_sysfs_os_lin.c	101;"	d	file:
SYSFS_FIVR_PATH	esif_uf_action_sysfs_os_lin.c	100;"	d	file:
SYSFS_FIVR_PCH_NODE_GET	esif_uf_action_sysfs_os_lin.c	104;"	d	file:
SYSFS_FIVR_PCH_NODE_SET	esif_uf_action_sysfs_os_lin.c	103;"	d	file:
SYSFS_FIVR_PCH_PATH	esif_uf_action_sysfs_os_lin.c	102;"	d	file:
SYSFS_GFX_PATH	esif_uf_action_sysfs_os_lin.c	109;"	d	file:
SYSFS_IMOK	esif_uf_action_sysfs_os_lin.c	115;"	d	file:
SYSFS_OEM_VARIABLE	esif_uf_action_sysfs_os_lin.c	114;"	d	file:
SYSFS_PCI	esif_uf_action_sysfs_os_lin.c	96;"	d	file:
SYSFS_PCI	esif_uf_sysfs_enumerate_os_lin.c	34;"	d	file:
SYSFS_PLATFORM	esif_uf_action_sysfs_os_lin.c	97;"	d	file:
SYSFS_PLATFORM	esif_uf_sysfs_enumerate_os_lin.c	35;"	d	file:
SYSFS_PROCESSOR_HID	esif_uf_sysfs_enumerate_os_lin.c	45;"	d	file:
SYSFS_PSTATE_PATH	esif_uf_action_sysfs_os_lin.c	98;"	d	file:
SYSFS_PSTATE_TFN	esif_uf_action_sysfs_os_lin.c	99;"	d	file:
SYSFS_THERMAL	esif_uf_action_sysfs_os_lin.c	107;"	d	file:
SYSFS_THERMAL	esif_uf_sysfs_enumerate_os_lin.c	33;"	d	file:
SYSFS_WWAN_HID	esif_uf_sysfs_enumerate_os_lin.c	49;"	d	file:
SYSF_FIVR_PCH_SSC	esif_uf_action_sysfs_os_lin.c	105;"	d	file:
SYSF_FIVR_PCH_VER	esif_uf_action_sysfs_os_lin.c	106;"	d	file:
Sensor	esif_uf_sensor_manager_os_lin.c	/^} Sensor, *SensorPtr;$/;"	t	typeref:struct:Sensor_s	file:
SensorBase	esif_uf_sensor_manager_os_lin.c	/^} SensorBase, *SensorBasePtr;$/;"	t	typeref:struct:SensorBase_s	file:
SensorBasePtr	esif_uf_sensor_manager_os_lin.c	/^} SensorBase, *SensorBasePtr;$/;"	t	typeref:struct:SensorBase_s	file:
SensorBase_s	esif_uf_sensor_manager_os_lin.c	/^typedef struct SensorBase_s {$/;"	s	file:
SensorLoc	esif_uf_sensor_manager_os_lin.c	/^} SensorLoc;$/;"	t	typeref:enum:SensorLocation_e	file:
SensorLocation_e	esif_uf_sensor_manager_os_lin.c	/^typedef enum SensorLocation_e {$/;"	g	file:
SensorPtr	esif_uf_sensor_manager_os_lin.c	/^} Sensor, *SensorPtr;$/;"	t	typeref:struct:Sensor_s	file:
SensorType	esif_uf_sensor_manager_os_lin.c	/^} SensorType;$/;"	t	typeref:enum:SensorType_e	file:
SensorType_e	esif_uf_sensor_manager_os_lin.c	/^typedef enum SensorType_e {$/;"	g	file:
Sensor_s	esif_uf_sensor_manager_os_lin.c	/^typedef struct Sensor_s {$/;"	s	file:
SetActionContext	esif_uf_action_sysfs_os_lin.c	/^static int SetActionContext(struct sysfsActionHashKey *keyPtr, EsifString devicePathName, EsifString deviceNodeName, Bool isWrite)$/;"	f	file:
SetBrightnessLevel	esif_uf_action_sysfs_os_lin.c	/^static eEsifError SetBrightnessLevel(const EsifUpPtr upPtr, const EsifDataPtr requestPtr, const EsifString devicePathPtr)$/;"	f	file:
SetEppWorkloadType	esif_uf_action_sysfs_os_lin.c	/^static eEsifError SetEppWorkloadType(const EsifUpPtr upPtr, const EsifDataPtr requestPtr, const EsifString devicePathPtr, const EsifString fileNamePtr)$/;"	f	file:
SetFanLevel	esif_uf_action_sysfs_os_lin.c	/^static eEsifError SetFanLevel(const EsifUpPtr upPtr, const EsifDataPtr requestPtr, const EsifString devicePathPtr)$/;"	f	file:
SetFivrCenterFreqCpu	esif_uf_action_sysfs_os_lin.c	/^static eEsifError SetFivrCenterFreqCpu(EsifUpPtr upPtr, UInt64 targetFreq)$/;"	f	file:
SetFivrCenterFreqPch	esif_uf_action_sysfs_os_lin.c	/^static eEsifError SetFivrCenterFreqPch(EsifUpPtr upPtr, UInt64 targetFreq, char *path)$/;"	f	file:
SetImOk	esif_uf_action_sysfs_os_lin.c	/^static eEsifError SetImOk(EsifUpPtr upPtr, const EsifDataPtr requestPtr)$/;"	f	file:
SetIntelPState	esif_uf_action_sysfs_os_lin.c	/^static eEsifError SetIntelPState(u64 sysval)$/;"	f	file:
SetOsc	esif_uf_action_sysfs_os_lin.c	/^static eEsifError SetOsc(EsifUpPtr upPtr, const EsifDataPtr requestPtr)$/;"	f	file:
SetThermalZonePolicy	esif_uf_action_sysfs_os_lin.c	/^static eEsifError SetThermalZonePolicy()$/;"	f	file:
SetUIntFromActionContext	esif_uf_action_sysfs_os_lin.c	/^static ESIF_INLINE eEsifError SetUIntFromActionContext(const size_t context, Int32 val)$/;"	f	file:
StartEsifSensorMgr	esif_uf_sensor_manager_os_lin.c	/^static void StartEsifSensorMgr()$/;"	f	file:
StopEsifSensorMgr	esif_uf_sensor_manager_os_lin.c	/^static void StopEsifSensorMgr()$/;"	f	file:
SysfsAttrToEventMap	esif_uf_sysfs_os_lin.h	/^} SysfsAttrToEventMap , *SysfsAttrToEventMapPtr;$/;"	t	typeref:struct:SysfsAttrToEventMap_s
SysfsAttrToEventMapPtr	esif_uf_sysfs_os_lin.h	/^} SysfsAttrToEventMap , *SysfsAttrToEventMapPtr;$/;"	t	typeref:struct:SysfsAttrToEventMap_s
SysfsAttrToEventMap_s	esif_uf_sysfs_os_lin.h	/^typedef struct SysfsAttrToEventMap_s {$/;"	s
SysfsGetBinaryData	main.c	/^eEsifError SysfsGetBinaryData(const char *path, const char *fileName, UInt8 *buffer, size_t bufferLength)$/;"	f
SysfsGetFileSize	main.c	/^eEsifError SysfsGetFileSize(const char *path, const char *fileName, size_t *fileSize)$/;"	f
SysfsGetFloat	main.c	/^eEsifError SysfsGetFloat(const char *path, const char *filename, float *pFloat)$/;"	f
SysfsGetInt	main.c	/^eEsifError SysfsGetInt(const char *path, const char *filename, int *pInt)$/;"	f
SysfsGetInt64	main.c	/^int SysfsGetInt64(const char *path, const char *filename, Int64 *p64)$/;"	f
SysfsGetInt64Direct	main.c	/^int SysfsGetInt64Direct(int fd, Int64 *p64)$/;"	f
SysfsGetIntDirect	main.c	/^eEsifError SysfsGetIntDirect(int fd, int *pInt)$/;"	f
SysfsGetString	main.c	/^int SysfsGetString(char *path, char *filename, char *str, size_t buf_len)$/;"	f
SysfsGetStringMultiline	main.c	/^int SysfsGetStringMultiline(const char *path, const char *filename, char *str)$/;"	f
SysfsReadEntry	esif_uf_sysfs_os_lin.h	/^} SysfsReadEntry , *sysfsReadEntryPtr;$/;"	t	typeref:struct:SysfsReadEntry_t
SysfsReadEntry_t	esif_uf_sysfs_os_lin.h	/^typedef struct SysfsReadEntry_t {$/;"	s
SysfsRegisterParticipants	esif_uf_sysfs_enumerate_os_lin.c	/^void SysfsRegisterParticipants ()$/;"	f
SysfsSetInt64	main.c	/^int SysfsSetInt64(char *path, char *filename, Int64 val)$/;"	f
SysfsSetInt64Direct	main.c	/^int SysfsSetInt64Direct(int fd, const Int32 val)$/;"	f
SysfsSetString	main.c	/^int SysfsSetString(const char *path, const char *filename, char *val)$/;"	f
SystemCpuIndexTable	esif_uf_sysfs_os_lin.h	/^} SystemCpuIndexTable, *SystemCpuIndexTablePtr;$/;"	t	typeref:struct:_SystemCpuIndexTable
SystemCpuIndexTablePtr	esif_uf_sysfs_os_lin.h	/^} SystemCpuIndexTable, *SystemCpuIndexTablePtr;$/;"	t	typeref:struct:_SystemCpuIndexTable
THERM	esif_uf_sysfs_os_lin.h	/^	THERM,$/;"	e	enum:zoneType
THERMAL_DEVICE_DOWN	main.c	/^	THERMAL_DEVICE_DOWN, \/* Thermal device is down *\/$/;"	e	enum:thermal_notify_event	file:
THERMAL_DEVICE_POWER_CAPABILITY_CHANGED	main.c	/^	THERMAL_DEVICE_POWER_CAPABILITY_CHANGED, \/* power capability changed *\/$/;"	e	enum:thermal_notify_event	file:
THERMAL_DEVICE_UP	main.c	/^	THERMAL_DEVICE_UP, \/* Thermal device is up after a down event *\/$/;"	e	enum:thermal_notify_event	file:
THERMAL_EVENT_KEEP_ALIVE	main.c	/^	THERMAL_EVENT_KEEP_ALIVE, \/* Request for user space handler to respond *\/$/;"	e	enum:thermal_notify_event	file:
THERMAL_EVENT_TEMP_SAMPLE	main.c	/^	THERMAL_EVENT_TEMP_SAMPLE, \/* New Temperature sample *\/$/;"	e	enum:thermal_notify_event	file:
THERMAL_EVENT_TRIP_CHANGED	main.c	/^	THERMAL_EVENT_TRIP_CHANGED, \/* TRIP Point temperature changed *\/$/;"	e	enum:thermal_notify_event	file:
THERMAL_EVENT_TRIP_VIOLATED	main.c	/^	THERMAL_EVENT_TRIP_VIOLATED, \/* TRIP Point violation *\/$/;"	e	enum:thermal_notify_event	file:
THERMAL_EVENT_UNDEFINED	main.c	/^	THERMAL_EVENT_UNDEFINED, \/* Undefined event *\/$/;"	e	enum:thermal_notify_event	file:
THERMAL_TABLE_CHANGED	main.c	/^	THERMAL_TABLE_CHANGED, \/* Thermal table(s) changed *\/$/;"	e	enum:thermal_notify_event	file:
TOTAL_PSY_PROPERTIES	main.c	55;"	d	file:
TRT	esif_uf_action_sysfs_os_lin.c	/^	TRT$/;"	e	enum:esif_thermal_rel_type	file:
TRT_COUNT	esif_uf_action_sysfs_os_lin.c	86;"	d	file:
TRT_LEN	esif_uf_action_sysfs_os_lin.c	84;"	d	file:
UpdateFineGrainSupportedStatus	esif_uf_action_sysfs_os_lin.c	/^static void UpdateFineGrainSupportedStatus(const EsifString devicePathPtr)$/;"	f	file:
UpdateFpsSupportedStatus	esif_uf_action_sysfs_os_lin.c	/^static void UpdateFpsSupportedStatus(const EsifString devicePathPtr)$/;"	f	file:
UpdateStepSize	esif_uf_action_sysfs_os_lin.c	/^static void UpdateStepSize(const EsifString devicePathPtr)$/;"	f	file:
ValidateOutput	esif_uf_action_sysfs_os_lin.c	/^static eEsifError ValidateOutput(char *devicePathPtr, char *nodeName, u64 val)$/;"	f	file:
WIFI_EVENT_MODULE_ADDED	main.c	/^	WIFI_EVENT_MODULE_ADDED,$/;"	e	enum:wifi_notify_event	file:
WIFI_EVENT_MODULE_REMOVED	main.c	/^	WIFI_EVENT_MODULE_REMOVED,$/;"	e	enum:wifi_notify_event	file:
WIFI_EVENT_UNDEFINED	main.c	/^	WIFI_EVENT_UNDEFINED,$/;"	e	enum:wifi_notify_event	file:
_ESIF_UF_SENSOR_MANAGER_LIN_	esif_uf_sensor_manager_os_lin.h	20;"	d
_ESIF_UF_SYFS_LIN_	esif_uf_sysfs_os_lin.h	20;"	d
_PerfCpuMapping	esif_uf_sysfs_os_lin.h	/^typedef struct _PerfCpuMapping {$/;"	s
_SystemCpuIndexTable	esif_uf_sysfs_os_lin.h	/^typedef struct _SystemCpuIndexTable {$/;"	s
accel	esif_uf_sensor_manager_os_lin.c	/^		Accelerometer accel;$/;"	m	union:Sensor_s::__anon1	file:
acpiCode	esif_uf_sysfs_os_lin.h	/^	char acpiCode[MAX_ZONE_NAME_LEN];$/;"	m	struct:thermalZone_t
acpiScope	esif_uf_sysfs_enumerate_os_lin.c	/^	char acpiScope[ESIF_SCOPE_LEN];$/;"	m	struct:participantInfo	file:
actionHashTablePtr	esif_uf_action_sysfs_os_lin.c	/^static struct esif_ht *actionHashTablePtr = NULL;$/;"	v	typeref:struct:esif_ht	file:
actionPriority	esif_uf_action_sysfs_os_lin.c	/^	UInt32 actionPriority;$/;"	m	struct:sysfsActionHashKey	file:
angleRaw	esif_uf_sensor_manager_os_lin.c	/^	int angleRaw;$/;"	m	struct:LidAngle_s	file:
art_ac0_max_level	esif_uf_action_sysfs_os_lin.c	/^	u64 art_ac0_max_level;$/;"	m	struct:art_table	file:
art_ac1_max_level	esif_uf_action_sysfs_os_lin.c	/^	u64 art_ac1_max_level;$/;"	m	struct:art_table	file:
art_ac2_max_level	esif_uf_action_sysfs_os_lin.c	/^	u64 art_ac2_max_level;$/;"	m	struct:art_table	file:
art_ac3_max_level	esif_uf_action_sysfs_os_lin.c	/^	u64 art_ac3_max_level;$/;"	m	struct:art_table	file:
art_ac4_max_level	esif_uf_action_sysfs_os_lin.c	/^	u64 art_ac4_max_level;$/;"	m	struct:art_table	file:
art_ac5_max_level	esif_uf_action_sysfs_os_lin.c	/^	u64 art_ac5_max_level;$/;"	m	struct:art_table	file:
art_ac6_max_level	esif_uf_action_sysfs_os_lin.c	/^	u64 art_ac6_max_level;$/;"	m	struct:art_table	file:
art_ac7_max_level	esif_uf_action_sysfs_os_lin.c	/^	u64 art_ac7_max_level;$/;"	m	struct:art_table	file:
art_ac8_max_level	esif_uf_action_sysfs_os_lin.c	/^	u64 art_ac8_max_level;$/;"	m	struct:art_table	file:
art_ac9_max_level	esif_uf_action_sysfs_os_lin.c	/^	u64 art_ac9_max_level;$/;"	m	struct:art_table	file:
art_source_device	esif_uf_action_sysfs_os_lin.c	/^	char art_source_device[8]; \/* ACPI 4 char name *\/$/;"	m	struct:art_table	file:
art_table	esif_uf_action_sysfs_os_lin.c	/^struct art_table {$/;"	s	file:
art_target_device	esif_uf_action_sysfs_os_lin.c	/^	char art_target_device[8]; \/* ACPI 4 char name *\/$/;"	m	struct:art_table	file:
art_weight	esif_uf_action_sysfs_os_lin.c	/^	u64 art_weight;$/;"	m	struct:art_table	file:
attributeName	esif_uf_sysfs_os_lin.h	/^	char attributeName[MAX_SYSFS_FILENAME];$/;"	m	struct:SysfsAttrToEventMap_s
base	esif_uf_sensor_manager_os_lin.c	/^	SensorBase base;$/;"	m	struct:Sensor_s	file:
bound	esif_uf_sysfs_os_lin.h	/^	Bool bound;$/;"	m	struct:thermalZone_t
check_for_uevent	main.c	/^static int check_for_uevent(int fd) {$/;"	f	file:
cmd_infile	main.c	/^static char *cmd_infile  = "esifd.cmd"; \/* -p parameter, created in temp path *\/$/;"	v	file:
cmd_outfile	main.c	/^static char *cmd_outfile = "esifd.log"; \/* -l parameter, created in temp path *\/$/;"	v	file:
control	esif_uf_action_sysfs_os_lin.c	/^	UInt64 control;$/;"	m	struct:fan_properties	file:
cpufreq	esif_uf_action_sysfs_os_lin.c	/^static int *cpufreq; \/\/Array storing Intercative Governor Cpu Frequencies$/;"	v	file:
createParticipantsFromThermalSysfs	esif_uf_sysfs_enumerate_os_lin.c	/^static void createParticipantsFromThermalSysfs(void)$/;"	f	file:
create_timer_thread_pool	main.c	/^static enum esif_rc create_timer_thread_pool(void)$/;"	f	file:
data	esif_uf_sensor_manager_os_lin.c	/^	} data;$/;"	m	struct:Sensor_s	typeref:union:Sensor_s::__anon1	file:
dbus_listen	main.c	/^void* dbus_listen()$/;"	f
desc	esif_uf_sysfs_enumerate_os_lin.c	/^	char desc[ESIF_DESC_LEN];$/;"	m	struct:participantInfo	file:
deviceName	esif_uf_sysfs_enumerate_os_lin.c	/^	char deviceName[ESIF_NAME_LEN];$/;"	m	struct:participantInfo	file:
enumerate_available_uf_participants	main.c	/^void enumerate_available_uf_participants(EnumerableUFParticipants typeOfUFParticipantsToEnumerate)$/;"	f
eppValue	esif_uf_action_sysfs_os_lin.c	/^	UInt32 eppValue;$/;"	m	struct:eppWorkloadMapEntry	file:
eppWorkloadMapEntry	esif_uf_action_sysfs_os_lin.c	/^struct eppWorkloadMapEntry {$/;"	s	file:
eppWorkloadMapTable	esif_uf_action_sysfs_os_lin.c	/^struct eppWorkloadMapEntry eppWorkloadMapTable[] = {$/;"	v	typeref:struct:eppWorkloadMapEntry
esif_domain_signal_and_stop_poll	main.c	/^static void esif_domain_signal_and_stop_poll(EsifUpPtr up_ptr, UInt8 participant_id, char *udev_target)$/;"	f	file:
esif_os_ipc_connect	esif_uf_ipc_os_lin.c	/^esif_os_handle_t esif_os_ipc_connect(char *session_id)$/;"	f
esif_os_ipc_disconnect	esif_uf_ipc_os_lin.c	/^void esif_os_ipc_disconnect(esif_os_handle_t handle)$/;"	f
esif_os_ipc_execute	esif_uf_ipc_os_lin.c	/^enum esif_rc esif_os_ipc_execute($/;"	f
esif_process_udev_event	main.c	/^static void esif_process_udev_event(char *udev_target)$/;"	f	file:
esif_register_sensor_lin	esif_uf_sensor_manager_os_lin.c	/^eEsifError esif_register_sensor_lin(eEsifEventType eventType)$/;"	f
esif_sysfs_command	esif_uf_action_sysfs_os_lin.c	/^enum esif_sysfs_command {$/;"	g	file:
esif_sysfs_param	esif_uf_action_sysfs_os_lin.c	/^enum esif_sysfs_param {$/;"	g	file:
esif_thermal_rel_type	esif_uf_action_sysfs_os_lin.c	/^enum esif_thermal_rel_type {$/;"	g	file:
esif_udev_exit	main.c	/^static void esif_udev_exit()$/;"	f	file:
esif_udev_is_started	main.c	/^static Bool esif_udev_is_started()$/;"	f	file:
esif_udev_listen	main.c	/^static void *esif_udev_listen(void *ptr)$/;"	f	file:
esif_udev_start	main.c	/^static void esif_udev_start()$/;"	f	file:
esif_udev_stop	main.c	/^static void esif_udev_stop()$/;"	f	file:
esif_uf_os_exit	main.c	/^void esif_uf_os_exit ()$/;"	f
esif_uf_os_init	main.c	/^eEsifError esif_uf_os_init ()$/;"	f
esif_uf_os_shell_disable	main.c	/^void esif_uf_os_shell_disable()$/;"	f
esif_uf_os_shell_enable	main.c	/^eEsifError esif_uf_os_shell_enable()$/;"	f
esif_unregister_sensor_lin	esif_uf_sensor_manager_os_lin.c	/^eEsifError esif_unregister_sensor_lin(eEsifEventType eventType)$/;"	f
eventType	esif_uf_sysfs_os_lin.h	/^	UInt32 eventType;$/;"	m	struct:SysfsAttrToEventMap_s
eventType	esif_uf_sysfs_os_lin.h	/^	UInt32 eventType;$/;"	m	struct:SysfsReadEntry_t
fan_properties	esif_uf_action_sysfs_os_lin.c	/^struct fan_properties {$/;"	s	file:
fd	esif_uf_sysfs_os_lin.h	/^	Int32 fd;$/;"	m	struct:SysfsReadEntry_t
fdAngle	esif_uf_sensor_manager_os_lin.c	/^	int fdAngle;	\/\/ File descriptor for lid angle sysfs node$/;"	m	struct:LidAngle_s	file:
fdX	esif_uf_sensor_manager_os_lin.c	/^	int fdX;	\/\/ File descriptors for each open sysfs node$/;"	m	struct:Accelerometer_s	file:
fdY	esif_uf_sensor_manager_os_lin.c	/^	int fdY;$/;"	m	struct:Accelerometer_s	file:
fdZ	esif_uf_sensor_manager_os_lin.c	/^	int fdZ;$/;"	m	struct:Accelerometer_s	file:
freqValue	esif_uf_action_sysfs_os_lin.c	/^	UInt32 freqValue;$/;"	m	struct:gfxPstateEntry	file:
gAccelBase	esif_uf_sensor_manager_os_lin.c	/^static Sensor *gAccelBase;$/;"	v	file:
gAccelLid	esif_uf_sensor_manager_os_lin.c	/^static Sensor *gAccelLid;$/;"	v	file:
gAngleRawNodeName	esif_uf_sensor_manager_os_lin.c	/^static const char gAngleRawNodeName[] = "in_angl_raw";$/;"	v	file:
gCurAccelData	esif_uf_sensor_manager_os_lin.c	/^static AccelerometerData gCurAccelData;$/;"	v	file:
gDispOrientation	esif_uf_sensor_manager_os_lin.c	/^static DisplayOrientation gDispOrientation = ORIENTATION_DISP_MAX;$/;"	v	file:
gDockMode	esif_uf_sensor_manager_os_lin.c	/^static DockMode gDockMode = DOCK_MODE_INVALID;$/;"	v	file:
gDockingBasePath	esif_uf_sensor_manager_os_lin.c	/^static char gDockingBasePath[] = "\/sys\/bus\/acpi\/devices\/GOOG6666:00";$/;"	v	file:
gEsifSensorMgrStarted	esif_uf_sensor_manager_os_lin.c	/^static Bool gEsifSensorMgrStarted = ESIF_FALSE;$/;"	v	file:
gEsifSensorMgrThread	esif_uf_sensor_manager_os_lin.c	/^static esif_thread_t gEsifSensorMgrThread;$/;"	v	file:
gFdBattCharge	esif_uf_sensor_manager_os_lin.c	/^static int gFdBattCharge;$/;"	v	file:
gFdDocking	esif_uf_sensor_manager_os_lin.c	/^static int gFdDocking;$/;"	v	file:
gFdLidState	esif_uf_sensor_manager_os_lin.c	/^static int gFdLidState;$/;"	v	file:
gFdPowerSrc	esif_uf_sensor_manager_os_lin.c	/^static int gFdPowerSrc;$/;"	v	file:
gInMotion	esif_uf_sensor_manager_os_lin.c	/^static Motion gInMotion = MOTION_MAX;$/;"	v	file:
gInclinMinMaxConfig	esif_uf_sensor_manager_os_lin.c	/^static const InclinometerMinMaxConfig gInclinMinMaxConfig= {$/;"	v	file:
gLidAngle	esif_uf_sensor_manager_os_lin.c	/^static Sensor *gLidAngle;$/;"	v	file:
gLidState	esif_uf_sensor_manager_os_lin.c	/^static LidState gLidState = LID_STATE_CLOSED;$/;"	v	file:
gLidStateBasePath	esif_uf_sensor_manager_os_lin.c	/^static char gLidStateBasePath[] = "\/proc\/acpi\/button\/lid\/LID0";$/;"	v	file:
gNumberOfSysfsReadEntries	esif_uf_sysfs_enumerate_os_lin.c	/^UInt32 gNumberOfSysfsReadEntries = 0; $/;"	v
gPlatOrientation	esif_uf_sensor_manager_os_lin.c	/^static PlatformOrientation gPlatOrientation = ORIENTATION_PLAT_MAX;$/;"	v	file:
gPlatType	esif_uf_sensor_manager_os_lin.c	/^static PlatformType gPlatType = PLATFORM_TYPE_INVALID;$/;"	v	file:
gPowerSrcBasePath	esif_uf_sensor_manager_os_lin.c	/^static char gPowerSrcBasePath[] = "\/sys\/class\/power_supply\/BAT0";$/;"	v	file:
gSensorBasePath	esif_uf_sensor_manager_os_lin.c	/^static const char gSensorBasePath[] =  "\/sys\/bus\/iio\/devices";$/;"	v	file:
gSensors	esif_uf_sensor_manager_os_lin.c	/^static Sensor *gSensors;$/;"	v	file:
gSensorsNum	esif_uf_sensor_manager_os_lin.c	/^static int gSensorsNum;$/;"	v	file:
gSocParticipantFound	esif_uf_sysfs_enumerate_os_lin.c	/^static Bool gSocParticipantFound = ESIF_FALSE;$/;"	v	file:
gSysfsAttrToEventMapList	esif_uf_sysfs_enumerate_os_lin.c	/^SysfsAttrToEventMap gSysfsAttrToEventMapList[] = { $/;"	v
gSysfsReadQuit	main.c	/^static Bool gSysfsReadQuit = ESIF_TRUE;$/;"	v	file:
gSysfsReadTable	esif_uf_sysfs_enumerate_os_lin.c	/^SysfsReadEntry gSysfsReadTable[MAX_SYSFS_READ_ENTRY_SIZE] = { 0 }; $/;"	v
gSysfsReadThread	main.c	/^static esif_thread_t gSysfsReadThread;$/;"	v	file:
gXRawNodeName	esif_uf_sensor_manager_os_lin.c	/^static const char gXRawNodeName[] = "in_accel_x_raw";$/;"	v	file:
gYRawNodeName	esif_uf_sensor_manager_os_lin.c	/^static const char gYRawNodeName[] = "in_accel_y_raw";$/;"	v	file:
gZRawNodeName	esif_uf_sensor_manager_os_lin.c	/^static const char gZRawNodeName[] = "in_accel_z_raw";$/;"	v	file:
g_BatteryPercentage	esif_uf_sensor_manager_os_lin.c	/^int g_BatteryPercentage = 0;$/;"	v
g_ManagerSysfsPath	esif_uf_sysfs_enumerate_os_lin.c	/^char g_ManagerSysfsPath[MAX_SYSFS_PATH] = { 0 };$/;"	v
g_PowerSrc	esif_uf_sensor_manager_os_lin.c	/^PowerSrc g_PowerSrc = POWER_SRC_AC;$/;"	v
g_dbus_conn	main.c	/^DBusConnection *g_dbus_conn;$/;"	v
g_dbus_thread	main.c	/^esif_thread_t g_dbus_thread;$/;"	v
g_fanProperties	esif_uf_action_sysfs_os_lin.c	/^struct fan_properties g_fanProperties[MAX_FAN_PROPERTIES];$/;"	v	typeref:struct:fan_properties
g_fanStepSize	esif_uf_action_sysfs_os_lin.c	/^UInt32 g_fanStepSize = 0xFFFFFFFF;$/;"	v
g_gfxPstateFreqMapTable	esif_uf_action_sysfs_os_lin.c	/^gfxPstateEntry g_gfxPstateFreqMapTable[MAX_GFX_PSTATE] = {0};$/;"	v
g_instance	main.c	/^static struct instancelock g_instance = {"esif_ufd.pid"};$/;"	v	typeref:struct:instancelock	file:
g_ipc_retry_max_msec	main.c	/^u32 g_ipc_retry_max_msec = 2000;	\/* 2 sec by default *\/$/;"	v
g_ipc_retry_msec	main.c	/^u32 g_ipc_retry_msec	 = 100;		\/* 100ms by default *\/$/;"	v
g_isFanFineGrainSupported	esif_uf_action_sysfs_os_lin.c	/^UInt32 g_isFanFineGrainSupported = 0xFFFFFFFF;$/;"	v
g_isFanFpsSupported	esif_uf_action_sysfs_os_lin.c	/^UInt32 g_isFanFpsSupported = 0xFFFFFFFF;$/;"	v
g_nproc	main.c	/^static long g_nproc = 1;$/;"	v	file:
g_os_quit	main.c	/^static Bool g_os_quit = ESIF_FALSE; \/* global flag to supress KW flagging as while(1) alternative *\/$/;"	v	file:
g_psy_dev	main.c	/^static char g_psy_dev[] = "power_supply\/BAT";$/;"	v	file:
g_psy_val	main.c	/^static char *g_psy_val[TOTAL_PSY_PROPERTIES];$/;"	v	file:
g_sigquit	main.c	/^static esif_ccb_sem_t g_sigquit; \/* global semaphore to signal main thread to quit, called from shell exit or sigterm handler *\/$/;"	v	file:
g_sigrtmin_thread_pool	main.c	/^static esif_thread_t *g_sigrtmin_thread_pool;$/;"	v	file:
g_start_event_thread	main.c	/^Bool g_start_event_thread = ESIF_TRUE;$/;"	v
g_sysfs	esif_uf_action_sysfs_os_lin.c	/^static EsifActIfaceStatic g_sysfs = {$/;"	v	file:
g_systemCpuIndexTable	esif_uf_sysfs_enumerate_os_lin.c	/^SystemCpuIndexTable g_systemCpuIndexTable = { 0 };$/;"	v
g_thermalZonePtr	esif_uf_sysfs_enumerate_os_lin.c	/^thermalZonePtr g_thermalZonePtr = NULL;$/;"	v
g_thread	main.c	/^esif_thread_t g_thread;$/;"	v
g_udev_quit	main.c	/^static Bool g_udev_quit = ESIF_TRUE;$/;"	v	file:
g_udev_target	main.c	/^static char *g_udev_target = NULL;$/;"	v	file:
g_udev_thread	main.c	/^static esif_thread_t g_udev_thread;$/;"	v	file:
g_zone_count	esif_uf_sysfs_enumerate_os_lin.c	/^static int g_zone_count = 0;$/;"	v	file:
get_full_scope_str	esif_uf_action_sysfs_os_lin.c	/^static void get_full_scope_str(char *orig, char *new)$/;"	f	file:
get_key_value_pair_from_str	esif_uf_action_sysfs_os_lin.c	/^static int get_key_value_pair_from_str(const char *str, char *key, char *value)$/;"	f	file:
get_nproc	main.c	/^static long get_nproc(long old, long new, long max)$/;"	f	file:
get_participant_current_control_capabilities	esif_uf_action_sysfs_os_lin.c	/^static enum esif_rc get_participant_current_control_capabilities(char *table_str, char *participant_path)$/;"	f	file:
get_participant_name_alias	esif_uf_sysfs_enumerate_os_lin.c	/^static enum esif_rc get_participant_name_alias(const char *ACPI_name, char *ACPI_alias)$/;"	f	file:
get_participant_scope	esif_uf_action_sysfs_os_lin.c	/^static eEsifError get_participant_scope(char *acpi_name, char *acpi_scope)$/;"	f	file:
get_perf_support_states	esif_uf_action_sysfs_os_lin.c	/^static enum esif_rc get_perf_support_states(char *table_str, char *participant_path)$/;"	f	file:
get_proc_perf_support_states	esif_uf_action_sysfs_os_lin.c	/^static enum esif_rc get_proc_perf_support_states(char *table_str)$/;"	f	file:
get_rapl_power_control_capabilities	esif_uf_action_sysfs_os_lin.c	/^static enum esif_rc get_rapl_power_control_capabilities($/;"	f	file:
get_supported_brightness_levels	esif_uf_action_sysfs_os_lin.c	/^static enum esif_rc get_supported_brightness_levels(char *table_str, char *participant_path)$/;"	f	file:
get_supported_policies	esif_uf_action_sysfs_os_lin.c	/^static enum esif_rc get_supported_policies(char *table_str, int idspNum, char *sysfs_str)$/;"	f	file:
get_thermal_rel_str	esif_uf_action_sysfs_os_lin.c	/^static enum esif_rc get_thermal_rel_str(enum esif_thermal_rel_type type, char *table_str)$/;"	f	file:
gfxPstateEntry	esif_uf_action_sysfs_os_lin.c	/^typedef struct gfxPstateEntry {$/;"	s	file:
gfxPstateEntry	esif_uf_action_sysfs_os_lin.c	/^}gfxPstateEntry;$/;"	t	typeref:struct:gfxPstateEntry	file:
hard	esif_uf_action_sysfs_os_lin.c	/^	u8 soft, hard;$/;"	m	struct:rfkill_event	file:
highestPerf	esif_uf_sysfs_os_lin.h	/^        UInt32 highestPerf;$/;"	m	struct:_PerfCpuMapping
highestPerformanceCpuIndex	esif_uf_sysfs_os_lin.h	/^        UInt32 highestPerformanceCpuIndex;$/;"	m	struct:_SystemCpuIndexTable
idx	esif_uf_action_sysfs_os_lin.c	/^	u32 idx;$/;"	m	struct:rfkill_event	file:
indexes	esif_uf_sysfs_os_lin.h	/^        UInt32 indexes[MAX_CORE_COUNT_SUPPORTED];$/;"	m	struct:_PerfCpuMapping
instance_islocked	main.c	/^int instance_islocked()$/;"	f
instance_lock	main.c	/^int instance_lock()$/;"	f
instance_unlock	main.c	/^void instance_unlock()$/;"	f
instancelock	main.c	/^struct instancelock {$/;"	s	file:
ipc_resync	main.c	/^eEsifError ipc_resync()$/;"	f
isInitialized	esif_uf_sysfs_os_lin.h	/^        Bool isInitialized;$/;"	m	struct:_SystemCpuIndexTable
kbhit	main.c	/^static int kbhit (void)$/;"	f	file:
kobj_powersupply_uevent_parse	main.c	/^static int kobj_powersupply_uevent_parse(char *buffer, int len, char **psy) {$/;"	f	file:
kobj_thermal_uevent_parse	main.c	/^static int kobj_thermal_uevent_parse(char *buffer, int len, char **zone_name, int *temp, int *event)$/;"	f	file:
kobj_wifi_uevent_parse	main.c	/^static int kobj_wifi_uevent_parse(char *buffer, int len, int *wifi_event)$/;"	f	file:
lidAngle	esif_uf_sensor_manager_os_lin.c	/^		LidAngle lidAngle;$/;"	m	union:Sensor_s::__anon1	file:
loc	esif_uf_sensor_manager_os_lin.c	/^	SensorLoc loc;$/;"	m	struct:SensorBase_s	file:
lockfd	main.c	/^	int  lockfd;    \/* lock file descriptor *\/$/;"	m	struct:instancelock	file:
lockfile	main.c	/^	char *lockfile; \/* lock filename *\/$/;"	m	struct:instancelock	file:
lowestPerformanceCpuIndex	esif_uf_sysfs_os_lin.h	/^        UInt32 lowestPerformanceCpuIndex;$/;"	m	struct:_SystemCpuIndexTable
main	main.c	/^int main (int argc, char **argv)$/;"	f
match_thermal_zone	esif_uf_sysfs_enumerate_os_lin.c	/^static Bool match_thermal_zone(const char *matchToName, char *participant_path)$/;"	f	file:
msg	main.c	/^static struct msghdr msg;$/;"	v	typeref:struct:msghdr	file:
msg_buf	main.c	/^static struct iovec msg_buf;$/;"	v	typeref:struct:iovec	file:
name	esif_uf_sysfs_enumerate_os_lin.c	/^	char name[ESIF_NAME_LEN];$/;"	m	struct:participantInfo	file:
netlink_msg	main.c	/^static struct nlmsghdr *netlink_msg = NULL;$/;"	v	typeref:struct:nlmsghdr	file:
newParticipantCreate	esif_uf_sysfs_enumerate_os_lin.c	/^static eEsifError newParticipantCreate ($/;"	f	file:
noiseLevel	esif_uf_action_sysfs_os_lin.c	/^	UInt64 noiseLevel;$/;"	m	struct:fan_properties	file:
numberOfCpuTypes	esif_uf_sysfs_os_lin.h	/^        UInt32 numberOfCpuTypes;$/;"	m	struct:_SystemCpuIndexTable
numberOfCpus	esif_uf_sysfs_os_lin.h	/^        UInt32 numberOfCpus;$/;"	m	struct:_SystemCpuIndexTable
numberOfIndexes	esif_uf_sysfs_os_lin.h	/^        UInt32 numberOfIndexes;$/;"	m	struct:_PerfCpuMapping
number_of_cores	esif_uf_action_sysfs_os_lin.c	/^static int number_of_cores;$/;"	v	file:
operation	esif_uf_action_sysfs_os_lin.c	/^	u8 operation;$/;"	m	struct:rfkill_event	file:
participantId	esif_uf_action_sysfs_os_lin.c	/^	esif_handle_t participantId;$/;"	m	struct:sysfsActionHashKey	file:
participantInfo	esif_uf_sysfs_enumerate_os_lin.c	/^struct participantInfo {$/;"	s	file:
participantName	esif_uf_sysfs_os_lin.h	/^	char participantName[ESIF_NAME_LEN];$/;"	m	struct:SysfsReadEntry_t
percentage	esif_uf_action_sysfs_os_lin.c	/^	UInt32 percentage;$/;"	m	struct:eppWorkloadMapEntry	file:
perfCpuMapping	esif_uf_sysfs_os_lin.h	/^        PerfCpuMapping perfCpuMapping[MAX_CPU_TYPES_SUPPORTED];$/;"	m	struct:_SystemCpuIndexTable
policy	esif_uf_action_sysfs_os_lin.c	/^	char policy[MAX_SYSFS_PATH];$/;"	m	struct:tzPolicy	file:
power	esif_uf_action_sysfs_os_lin.c	/^	UInt64 power;$/;"	m	struct:fan_properties	file:
power_supply_event	main.c	/^enum power_supply_event {$/;"	g	file:
primitiveTuple	esif_uf_action_sysfs_os_lin.c	/^	struct esif_primitive_tuple primitiveTuple;$/;"	m	struct:sysfsActionHashKey	typeref:struct:sysfsActionHashKey::esif_primitive_tuple	file:
pstate	esif_uf_action_sysfs_os_lin.c	/^	UInt32 pstate;$/;"	m	struct:gfxPstateEntry	file:
register_events_for_available_uf_participants	main.c	/^void register_events_for_available_uf_participants(EnumerableUFParticipants typeOfUFParticipantsToEnumerate)$/;"	f
register_for_system_metric_notification_lin	esif_uf_sensor_manager_os_lin.c	/^eEsifError register_for_system_metric_notification_lin(esif_guid_t *guid)$/;"	f
release_timer_thread_pool	main.c	/^static void release_timer_thread_pool(void)$/;"	f	file:
replace_cpu_id	esif_uf_action_sysfs_os_lin.c	/^static void replace_cpu_id(char *str)$/;"	f	file:
replace_str	esif_uf_action_sysfs_os_lin.c	/^static int replace_str(char *str, char *orig, char *new, char *rpl_buff, int rpl_buff_len)$/;"	f	file:
rfkill_event	esif_uf_action_sysfs_os_lin.c	/^struct rfkill_event {$/;"	s	file:
rfkill_operation	esif_uf_action_sysfs_os_lin.c	/^enum rfkill_operation {$/;"	g	file:
rfkill_type	esif_uf_action_sysfs_os_lin.c	/^enum rfkill_type {$/;"	g	file:
run_as_daemon	main.c	/^static int run_as_daemon(int start_with_pipe, int start_with_log, int start_in_background)$/;"	f	file:
run_as_server	main.c	/^static int run_as_server(FILE* input, char* command, int quit_after_command)$/;"	f	file:
s3_callback	main.c	/^s3_callback(DBusConnection *conn, DBusMessage *message, void *user_data)$/;"	f	file:
scale	esif_uf_sensor_manager_os_lin.c	/^	float scale;$/;"	m	struct:Accelerometer_s	file:
scanPCI	esif_uf_sysfs_enumerate_os_lin.c	/^static int scanPCI(void)$/;"	f	file:
scanPlat	esif_uf_sysfs_enumerate_os_lin.c	/^static int scanPlat(void)$/;"	f	file:
scanThermal	esif_uf_sysfs_enumerate_os_lin.c	/^static int scanThermal(void)$/;"	f	file:
signal_quit	main.c	/^static void signal_quit()$/;"	f	file:
sigrtmin_block	main.c	/^static void sigrtmin_block(void)$/;"	f	file:
sigrtmin_worker_thread	main.c	/^static void *sigrtmin_worker_thread(void *ptr)$/;"	f	file:
sigterm_enable	main.c	/^void sigterm_enable()$/;"	f
sigterm_handler	main.c	/^static void sigterm_handler(int signum)$/;"	f	file:
sigusr1_enable	esif_uf_sensor_manager_os_lin.c	/^static void sigusr1_enable()$/;"	f	file:
sigusr1_enable	main.c	/^static void sigusr1_enable()$/;"	f	file:
sigusr1_handler	esif_uf_sensor_manager_os_lin.c	/^static void sigusr1_handler(int signum)$/;"	f	file:
sigusr1_handler	main.c	/^static void sigusr1_handler(int signum)$/;"	f	file:
sock_addr_dest	main.c	/^static struct sockaddr_nl sock_addr_src, sock_addr_dest;$/;"	v	typeref:struct:	file:
sock_addr_src	main.c	/^static struct sockaddr_nl sock_addr_src, sock_addr_dest;$/;"	v	typeref:struct:sockaddr_nl	file:
sock_fd	main.c	/^static int sock_fd;$/;"	v	file:
soft	esif_uf_action_sysfs_os_lin.c	/^	u8 soft, hard;$/;"	m	struct:rfkill_event	file:
speed	esif_uf_action_sysfs_os_lin.c	/^	UInt64 speed;$/;"	m	struct:fan_properties	file:
sys_long_string_val	esif_uf_action_sysfs_os_lin.c	/^static char sys_long_string_val[MAX_SYSFS_STRING];$/;"	v	file:
sysfsActionHashKey	esif_uf_action_sysfs_os_lin.c	/^struct sysfsActionHashKey {$/;"	s	file:
sysfsPath	esif_uf_sysfs_os_lin.h	/^	char sysfsPath[ESIF_PATH_LEN];$/;"	m	struct:SysfsReadEntry_t
sysfsReadEntryPtr	esif_uf_sysfs_os_lin.h	/^} SysfsReadEntry , *sysfsReadEntryPtr;$/;"	t	typeref:struct:SysfsReadEntry_t
sysfsType	esif_uf_sysfs_enumerate_os_lin.c	/^	char sysfsType[MAX_ZONE_NAME_LEN];$/;"	m	struct:participantInfo	file:
thermalPath	esif_uf_sysfs_os_lin.h	/^	char thermalPath[MAX_SYSFS_PATH];$/;"	m	struct:thermalZone_t
thermalZone	esif_uf_sysfs_os_lin.h	/^} thermalZone, *thermalZonePtr;$/;"	t	typeref:struct:thermalZone_t
thermalZonePtr	esif_uf_sysfs_os_lin.h	/^} thermalZone, *thermalZonePtr;$/;"	t	typeref:struct:thermalZone_t
thermalZone_t	esif_uf_sysfs_os_lin.h	/^typedef struct thermalZone_t {$/;"	s
thermal_device_path	main.c	/^static char thermal_device_path[] = "\/devices\/virtual\/thermal\/thermal_zone";$/;"	v	file:
thermal_notify_event	main.c	/^enum thermal_notify_event {$/;"	g	file:
time_elapsed_in_ms	main.c	/^static Int64 time_elapsed_in_ms(struct timeval *old, struct timeval *now)$/;"	f	file:
tripPoint	esif_uf_action_sysfs_os_lin.c	/^	UInt64 tripPoint;$/;"	m	struct:fan_properties	file:
trt_influence	esif_uf_action_sysfs_os_lin.c	/^	u64 trt_influence;$/;"	m	struct:trt_table	file:
trt_reserved	esif_uf_action_sysfs_os_lin.c	/^	u64 trt_reserved[4];$/;"	m	struct:trt_table	file:
trt_sample_period	esif_uf_action_sysfs_os_lin.c	/^	u64 trt_sample_period;$/;"	m	struct:trt_table	file:
trt_source_device	esif_uf_action_sysfs_os_lin.c	/^	char trt_source_device[8]; \/* ACPI single name *\/$/;"	m	struct:trt_table	file:
trt_table	esif_uf_action_sysfs_os_lin.c	/^struct trt_table {$/;"	s	file:
trt_target_device	esif_uf_action_sysfs_os_lin.c	/^	char trt_target_device[8]; \/* ACPI single name *\/$/;"	m	struct:trt_table	file:
type	esif_uf_action_sysfs_os_lin.c	/^	u8 type;$/;"	m	struct:rfkill_event	file:
type	esif_uf_sensor_manager_os_lin.c	/^	SensorType type;$/;"	m	struct:SensorBase_s	file:
tzPolicies	esif_uf_action_sysfs_os_lin.c	/^static struct tzPolicy* tzPolicies = NULL;$/;"	v	typeref:struct:tzPolicy	file:
tzPolicy	esif_uf_action_sysfs_os_lin.c	/^struct tzPolicy {$/;"	s	file:
value	esif_uf_sysfs_os_lin.h	/^	Int64 value;$/;"	m	struct:SysfsReadEntry_t
wifi_device_path	main.c	/^static char wifi_device_path[] = "\/module\/iwlwifi";$/;"	v	file:
wifi_event	main.c	/^}wifi_event;$/;"	v	typeref:enum:wifi_notify_event
wifi_notify_event	main.c	/^enum wifi_notify_event {$/;"	g	file:
workloadType	esif_uf_action_sysfs_os_lin.c	/^	char workloadType[32];$/;"	m	struct:eppWorkloadMapEntry	file:
xRaw	esif_uf_sensor_manager_os_lin.c	/^	int xRaw;$/;"	m	struct:Accelerometer_s	file:
yRaw	esif_uf_sensor_manager_os_lin.c	/^	int yRaw;$/;"	m	struct:Accelerometer_s	file:
zRaw	esif_uf_sensor_manager_os_lin.c	/^	int zRaw;$/;"	m	struct:Accelerometer_s	file:
zoneType	esif_uf_sysfs_os_lin.h	/^	enum zoneType zoneType;$/;"	m	struct:thermalZone_t	typeref:enum:thermalZone_t::zoneType
zoneType	esif_uf_sysfs_os_lin.h	/^enum zoneType {$/;"	g
