set(CRITICAL_POLICY "DptfPolicyCritical")

if (IN_SOURCE_BUILD MATCHES YES)
        file(GLOB_RECURSE CRITICAL_POLICY_SOURCES "*.cpp")
else ()
	file(GLOB_RECURSE CRITICAL_POLICY_SOURCES "../../../Sources/Policies/CriticalPolicy/*.cpp")
endif()

add_library(${CRITICAL_POLICY} MODULE ${CRITICAL_POLICY_SOURCES})

set_target_properties(${CRITICAL_POLICY} PROPERTIES PREFIX "")

target_link_libraries(${CRITICAL_POLICY} ${POLICY_LIB} ${SHARED_LIB} ${BASIC_TYPES_LIB} ${ESIF_TYPES_LIB} ${DPTF_TYPES_LIB} ${DPTF_OBJECTS_LIB} ${PARTICIPANT_CONTROLS_LIB} ${MESSAGE_LOGGING_LIB} ${PARTICIPANT_LIB} ${EVENTS_LIB} ${XML_LIB})
if (CMAKE_BUILD_TYPE MATCHES Release AND NOT CHROMIUM_BUILD MATCHES YES)
	add_custom_command(TARGET ${CRITICAL_POLICY}
		POST_BUILD
		COMMAND cp ${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/${CRITICAL_POLICY}.so ${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/${CRITICAL_POLICY}.so.debug
		COMMAND ${CMAKE_STRIP} --strip-unneeded ${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/${CRITICAL_POLICY}.so
		COMMAND ${CMAKE_OBJCOPY} --add-gnu-debuglink=${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/${CRITICAL_POLICY}.so.debug ${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/${CRITICAL_POLICY}.so
		BYPRODUCTS ${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/${CRITICAL_POLICY}.so.debug
	)
endif()