if (IN_SOURCE_BUILD MATCHES YES)
	include_directories(..)
	include_directories(../../../Common)
	include_directories(../Common)
	include_directories(../ThirdParty)
	include_directories(../Libraries/ConfigurationFileContent)
	include_directories(../Libraries/FileIo)
	include_directories(../Libraries/LzmaDataCompressor)
	include_directories(../SharedLib)
	include_directories(../SharedLib/BasicTypesLib)
	include_directories(../SharedLib/EsifTypesLib)
	include_directories(../SharedLib/DptfTypesLib)
	include_directories(../SharedLib/DptfObjectsLib)
	include_directories(../SharedLib/ParticipantControlsLib)
	include_directories(../SharedLib/ParticipantLib)
	include_directories(../SharedLib/EventsLib)
	include_directories(../SharedLib/MessageLoggingLib)
	include_directories(../SharedLib/XmlLib)
	include_directories(../SharedLib/ResourceLib)
	file(GLOB_RECURSE manager_SOURCES "*.cpp")
else ()
	include_directories(../../Sources)
	include_directories(../../../Common)
	include_directories(../../Sources/Common)
	include_directories(../../Sources/ThirdParty)
	include_directories(../../Sources/Libraries/ConfigurationFileContent)
	include_directories(../../Sources/Libraries/FileIo)
	include_directories(../../Sources/Libraries/LzmaDataCompressor)
	include_directories(../../Sources/SharedLib)
	include_directories(../../Sources/SharedLib/BasicTypesLib)
	include_directories(../../Sources/SharedLib/EsifTypesLib)
	include_directories(../../Sources/SharedLib/DptfTypesLib)
	include_directories(../../Sources/SharedLib/DptfObjectsLib)
	include_directories(../../Sources/SharedLib/ParticipantControlsLib)
	include_directories(../../Sources/SharedLib/ParticipantLib)
	include_directories(../../Sources/SharedLib/EventsLib)
	include_directories(../../Sources/SharedLib/MessageLoggingLib)
	include_directories(../../Sources/SharedLib/XmlLib)
	include_directories(../../Sources/SharedLib/ResourceLib)
	file(GLOB_RECURSE manager_SOURCES "../../Sources/Manager/*.cpp")
endif()

#find_package(Threads REQUIRED)

add_library(${MANAGER} MODULE ${manager_SOURCES})

set_target_properties(${MANAGER} PROPERTIES PREFIX "")

target_link_libraries(${MANAGER} ${SHARED_LIB} ${BASIC_TYPES_LIB} ${ESIF_TYPES_LIB} ${DPTF_TYPES_LIB} ${DPTF_OBJECTS_LIB} ${PARTICIPANT_CONTROLS_LIB} ${PARTICIPANT_LIB} ${EVENTS_LIB} ${XML_LIB} ${MESSAGE_LOGGING_LIB} ${RESOURCE_LIB} ${UNIFIED_PARTICIPANT} rt ${CMAKE_DL_LIBS} ${CMAKE_THREAD_LIBS_INIT} ${FILEIO_LIB} ${CONFIGURATION_FILE_CONTENT_LIB} ${LZMA_DATA_COMPRESSOR_LIB})
if (CMAKE_BUILD_TYPE MATCHES Release AND NOT CHROMIUM_BUILD MATCHES YES)
	add_custom_command(TARGET ${MANAGER}
		POST_BUILD
		COMMAND cp ${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/${MANAGER}.so ${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/${MANAGER}.so.debug
		COMMAND ${CMAKE_STRIP} --strip-unneeded ${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/${MANAGER}.so
		COMMAND ${CMAKE_OBJCOPY} --add-gnu-debuglink=${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/${MANAGER}.so.debug ${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/${MANAGER}.so
	)
endif()
